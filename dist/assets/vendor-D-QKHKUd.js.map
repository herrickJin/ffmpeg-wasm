{"version":3,"file":"vendor-D-QKHKUd.js","sources":["../../node_modules/@ffmpeg/ffmpeg/dist/esm/const.js","../../node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js","../../node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js","../../node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js","../../node_modules/@ffmpeg/ffmpeg/dist/esm/types.js"],"sourcesContent":["export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.9\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"FFPROBE\"] = \"FFPROBE\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n","/**\n * Generate an unique message ID.\n */\nexport const getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n","export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n","import { FFMessageType } from \"./const.js\";\nimport { getMessageID } from \"./utils.js\";\nimport { ERROR_TERMINATED, ERROR_NOT_LOADED } from \"./errors.js\";\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nexport class FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.MOUNT:\n                    case FFMessageType.UNMOUNT:\n                    case FFMessageType.EXEC:\n                    case FFMessageType.FFPROBE:\n                    case FFMessageType.WRITE_FILE:\n                    case FFMessageType.READ_FILE:\n                    case FFMessageType.DELETE_FILE:\n                    case FFMessageType.RENAME:\n                    case FFMessageType.CREATE_DIR:\n                    case FFMessageType.LIST_DIR:\n                    case FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = getMessageID();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, import.meta.url), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(\"./worker.js\", import.meta.url), {\n                    type: \"module\",\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Execute ffprobe command.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // Getting duration of a video in seconds: ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 video.avi -o output.txt\n     * await ffmpeg.ffprobe([\"-v\", \"error\", \"-show_entries\", \"format=duration\", \"-of\", \"default=noprint_wrappers=1:nokey=1\", \"video.avi\", \"-o\", \"output.txt\"]);\n     * const data = ffmpeg.readFile(\"output.txt\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    ffprobe = (\n    /** ffprobe command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.FFPROBE,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n","export var FFFSType;\n(function (FFFSType) {\n    FFFSType[\"MEMFS\"] = \"MEMFS\";\n    FFFSType[\"NODEFS\"] = \"NODEFS\";\n    FFFSType[\"NODERAWFS\"] = \"NODERAWFS\";\n    FFFSType[\"IDBFS\"] = \"IDBFS\";\n    FFFSType[\"WORKERFS\"] = \"WORKERFS\";\n    FFFSType[\"PROXYFS\"] = \"PROXYFS\";\n})(FFFSType || (FFFSType = {}));\n"],"names":["FFMessageType","getMessageID","messageID","ERROR_NOT_LOADED","ERROR_TERMINATED","_worker","_resolves","_rejects","_logEventCallbacks","_progressEventCallbacks","_registerHandlers","_send","FFmpeg","__privateAdd","__publicField","__privateGet","id","type","data","f","trans","signal","resolve","reject","classWorkerURL","config","__privateSet","args","timeout","ids","path","fsType","options","mountPoint","encoding","oldPath","newPath","event","callback","FFFSType"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}