{"version":3,"file":"index-DDhAt2_Y.js","sources":["../../node_modules/@ffmpeg/util/dist/esm/index.js","../../src/main.js"],"sourcesContent":["import { ERROR_RESPONSE_BODY_READER, ERROR_INCOMPLETED_DOWNLOAD, } from \"./errors.js\";\nimport { HeaderContentLength } from \"./const.js\";\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nexport const fetchFile = async (file) => {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = await (await fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = await (await fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = await readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n};\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nexport const importScript = async (url) => new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    const eventHandler = () => {\n        script.removeEventListener(\"load\", eventHandler);\n        resolve();\n    };\n    script.src = url;\n    script.type = \"text/javascript\";\n    script.addEventListener(\"load\", eventHandler);\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n});\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nexport const downloadWithProgress = async (url, cb) => {\n    const resp = await fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(HeaderContentLength) || \"-1\");\n        const reader = resp.body?.getReader();\n        if (!reader)\n            throw ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = await reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = await resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n};\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nexport const toBlobURL = async (url, mimeType, progress = false, cb) => {\n    const buf = progress\n        ? await downloadWithProgress(url, cb)\n        : await (await fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n};\n","import { FFmpeg } from '@ffmpeg/ffmpeg';\nimport { fetchFile } from '@ffmpeg/util';\n\nclass FFmpegDemo {\n    constructor() {\n        this.ffmpeg = null;\n        this.originalFile = null;\n        this.isConverting = false;\n        this.startTime = null;\n        this.mediaSource = null;\n        this.sourceBuffer = null;\n        this.supportedMimeType = null;\n        this.streamQueue = [];\n        this.isStreaming = false;\n        this.performanceMetrics = {\n            conversionTime: 0,\n            originalSize: 0,\n            convertedSize: 0,\n            memoryUsage: 0\n        };\n        \n        // 调试设置\n        this.debugMode = this.getDebugMode();\n        \n        // 增强的状态监控\n        this.bufferMonitor = {\n            totalChunksAdded: 0,\n            totalChunksProcessed: 0,\n            totalBytesProcessed: 0,\n            lastErrorTime: null,\n            consecutiveErrors: 0,\n            bufferHealth: 'good',\n            lastBufferCheck: Date.now()\n        };\n        \n        // 性能监控定时器\n        this.performanceMonitor = null;\n        \n        // 先设置事件监听器，确保 UI 响应\n        this.setupEventListeners();\n        this.log('FFmpeg WASM Demo 开始初始化');\n        if (this.debugMode) {\n            this.log('调试模式已启用', 'debug');\n        }\n        \n        // 异步初始化 FFmpeg\n        this.initFFmpeg();\n    }\n\n    async init() {\n        await this.initFFmpeg();\n        this.setupEventListeners();\n        this.log('FFmpeg WASM Demo 初始化完成');\n    }\n\n    async initFFmpeg() {\n        this.log('正在加载 FFmpeg WASM...');\n        try {\n            this.ffmpeg = new FFmpeg();\n            \n            // 设置日志和进度回调\n            this.ffmpeg.on('log', (data) => {\n                this.log(`FFmpeg: ${data.message}`);\n            });\n            \n            this.ffmpeg.on('progress', (progress) => {\n                this.updateProgress(progress);\n            });\n            \n            await this.ffmpeg.load({\n                corePath: 'https://unpkg.com/@ffmpeg/core@0.12.6/dist/ffmpeg-core.js'\n            });\n            \n            this.log('FFmpeg WASM 加载完成');\n            \n            // 如果已经有文件选择，启用转码按钮\n            if (this.originalFile) {\n                document.getElementById('convertBtn').disabled = false;\n                this.log('转码功能已启用');\n            }\n        } catch (error) {\n            this.log(`FFmpeg WASM 加载失败: ${error.message}`, 'error');\n            console.error('FFmpeg 加载失败:', error);\n            // 即使 FFmpeg 加载失败，也启用基本的文件上传功能\n            this.log('文件上传功能已启用，但转码功能可能不可用', 'warning');\n        }\n    }\n\n    // 检查 FFmpeg 文件系统状态\n    async checkFilesystemHealth() {\n        try {\n            // 尝试创建一个测试文件来验证文件系统\n            const testFilename = 'test_fs_health.tmp';\n            const testData = new Uint8Array([1, 2, 3, 4, 5]);\n            \n            await this.ffmpeg.writeFile(testFilename, testData);\n            await this.ffmpeg.deleteFile(testFilename);\n            \n            this.log('FFmpeg 文件系统健康检查通过');\n            return true;\n        } catch (error) {\n            this.log(`FFmpeg 文件系统健康检查失败: ${error.message}`, 'error');\n            return false;\n        }\n    }\n\n    // 获取调试模式设置\n    getDebugMode() {\n        // 检查 URL 参数\n        const urlParams = new URLSearchParams(window.location.search);\n        if (urlParams.has('debug')) {\n            return urlParams.get('debug') === 'true';\n        }\n        \n        // 检查本地存储\n        try {\n            const savedDebugMode = localStorage.getItem('ffmpeg-debug-mode');\n            if (savedDebugMode !== null) {\n                return savedDebugMode === 'true';\n            }\n        } catch (e) {\n            // 忽略本地存储错误\n        }\n        \n        // 默认关闭调试模式\n        return false;\n    }\n\n    setupEventListeners() {\n        const uploadSection = document.getElementById('uploadSection');\n        const fileInput = document.getElementById('fileInput');\n        const convertBtn = document.getElementById('convertBtn');\n        const stopStreamingBtn = document.getElementById('stopStreamingBtn');\n        const crfSlider = document.getElementById('crf');\n        const crfValue = document.getElementById('crfValue');\n\n        if (!uploadSection || !fileInput || !convertBtn) {\n            this.log('错误: 无法找到页面元素', 'error');\n            return;\n        }\n\n        this.log('设置事件监听器...');\n\n        // 文件上传\n        uploadSection.addEventListener('click', () => {\n            this.log('点击上传区域');\n            fileInput.click();\n        });\n        \n        uploadSection.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            uploadSection.classList.add('dragover');\n            this.log('拖拽文件到上传区域');\n        });\n        \n        uploadSection.addEventListener('dragleave', () => {\n            uploadSection.classList.remove('dragover');\n            this.log('拖拽离开上传区域');\n        });\n        \n        uploadSection.addEventListener('drop', (e) => {\n            e.preventDefault();\n            uploadSection.classList.remove('dragover');\n            this.log('文件已拖拽到上传区域');\n            const files = e.dataTransfer.files;\n            if (files.length > 0) {\n                this.handleFileSelect(files[0]);\n            }\n        });\n\n        fileInput.addEventListener('change', (e) => {\n            this.log('文件选择器发生变化');\n            if (e.target.files.length > 0) {\n                this.handleFileSelect(e.target.files[0]);\n            }\n        });\n\n        // 转码按钮\n        convertBtn.addEventListener('click', () => {\n            if (!this.isConverting) {\n                this.startConversion();\n            }\n        });\n\n        // 停止流式播放按钮\n        if (stopStreamingBtn) {\n            stopStreamingBtn.addEventListener('click', () => {\n                this.stopStreaming();\n                stopStreamingBtn.style.display = 'none';\n                convertBtn.style.display = 'block';\n            });\n        }\n\n        // CRF 滑块\n        crfSlider.addEventListener('input', (e) => {\n            crfValue.textContent = e.target.value;\n        });\n\n        // 添加键盘快捷键\n        document.addEventListener('keydown', (e) => {\n            // Ctrl+Shift+D 切换调试模式\n            if (e.ctrlKey && e.shiftKey && e.key === 'D') {\n                e.preventDefault();\n                this.toggleDebugMode();\n            }\n        });\n    }\n\n    // 切换调试模式\n    toggleDebugMode() {\n        this.debugMode = !this.debugMode;\n        \n        // 保存到本地存储\n        try {\n            localStorage.setItem('ffmpeg-debug-mode', this.debugMode.toString());\n        } catch (e) {\n            console.warn('无法保存调试模式设置到本地存储');\n        }\n        \n        const status = this.debugMode ? '已启用' : '已禁用';\n        this.log(`调试模式${status}`, 'info');\n        \n        if (this.debugMode) {\n            this.log('当前系统状态:', 'debug');\n            this.log(`- FFmpeg 状态: ${this.ffmpeg ? '已加载' : '未加载'}`, 'debug');\n            this.log(`- 是否正在转码: ${this.isConverting}`, 'debug');\n            this.log(`- 是否正在流式播放: ${this.isStreaming}`, 'debug');\n            this.log(`- 队列长度: ${this.streamQueue.length}`, 'debug');\n            this.log(`- MediaSource 状态: ${this.mediaSource ? this.mediaSource.readyState : '不存在'}`, 'debug');\n            this.log(`- SourceBuffer 状态: ${this.sourceBuffer ? '存在' : '不存在'}`, 'debug');\n        }\n    }\n\n    handleFileSelect(file) {\n        if (!file.type.startsWith('video/')) {\n            this.log('请选择视频文件', 'error');\n            return;\n        }\n\n        this.originalFile = file;\n        this.performanceMetrics.originalSize = file.size;\n        \n        // 显示原始视频\n        this.displayOriginalVideo(file);\n        \n        // 只有在 FFmpeg 加载完成时才启用转码按钮\n        const convertBtn = document.getElementById('convertBtn');\n        if (this.ffmpeg) {\n            convertBtn.disabled = false;\n            this.log(`已选择文件: ${file.name} (${this.formatFileSize(file.size)})`);\n        } else {\n            convertBtn.disabled = true;\n            this.log(`已选择文件: ${file.name} (${this.formatFileSize(file.size)})`, 'warning');\n            this.log('FFmpeg 正在加载中，请稍后再试', 'warning');\n        }\n    }\n\n    displayOriginalVideo(file) {\n        const container = document.getElementById('originalVideoContainer');\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(file);\n        video.controls = true;\n        video.style.maxWidth = '100%';\n        video.style.maxHeight = '400px';\n        \n        container.innerHTML = '';\n        container.appendChild(video);\n        \n        video.addEventListener('loadedmetadata', () => {\n            this.log(`原始视频信息: ${video.videoWidth}x${video.videoHeight}, ${video.duration.toFixed(2)}秒`);\n        });\n    }\n\n    async startConversion() {\n        if (!this.originalFile || this.isConverting) return;\n\n        this.isConverting = true;\n        this.startTime = performance.now();\n        \n        const convertBtn = document.getElementById('convertBtn');\n        const stopStreamingBtn = document.getElementById('stopStreamingBtn');\n        const progressSection = document.getElementById('progressSection');\n        const streamingMode = document.getElementById('streamingMode').value;\n        \n        convertBtn.innerHTML = '转码中<span class=\"loading\"></span>';\n        convertBtn.disabled = true;\n        progressSection.style.display = 'block';\n        \n        // 如果是实时转码，显示停止按钮\n        if (streamingMode === 'realtime') {\n            convertBtn.style.display = 'none';\n            stopStreamingBtn.style.display = 'block';\n        }\n        \n        this.log('开始转码...');\n        \n        try {\n            await this.convertVideo();\n            this.log('转码完成');\n        } catch (error) {\n            this.log(`转码失败: ${error.message}`, 'error');\n            console.error('转码失败:', error);\n        } finally {\n            this.isConverting = false;\n            convertBtn.innerHTML = '开始转码';\n            convertBtn.disabled = false;\n            convertBtn.style.display = 'block';\n            stopStreamingBtn.style.display = 'none';\n        }\n    }\n\n    async convertVideo() {\n        const outputFormat = document.getElementById('outputFormat').value;\n        const videoCodec = document.getElementById('videoCodec').value;\n        const crf = document.getElementById('crf').value;\n        const preset = document.getElementById('preset').value;\n        const threads = document.getElementById('threads').value;\n        const performanceMode = document.getElementById('performanceMode').value;\n        const hardwareAcceleration = document.getElementById('hardwareAcceleration').value;\n        const streamingMode = document.getElementById('streamingMode').value;\n        \n        const outputFileName = `converted_${Date.now()}.${outputFormat}`;\n        \n        this.log('=== 转码开始 ===');\n        this.log(`输入文件: ${this.originalFile.name} (${this.formatFileSize(this.originalFile.size)})`);\n        this.log(`输出格式: ${outputFormat}`);\n        this.log(`视频编码器: ${videoCodec}`);\n        this.log(`质量设置: CRF=${crf}`);\n        this.log(`速度预设: ${preset}`);\n        this.log(`线程数: ${threads === '0' ? '自动' : threads + ' 线程'}`);\n        this.log(`性能模式: ${this.getPerformanceModeText(performanceMode)}`);\n        this.log(`硬件加速: ${this.getHardwareAccelerationText(hardwareAcceleration)}`);\n        this.log(`流式处理: ${this.getStreamingModeText(streamingMode)}`);\n        \n        // 检查文件系统健康状态\n        this.log('检查 FFmpeg 文件系统状态...');\n        const filesystemHealthy = await this.checkFilesystemHealth();\n        if (!filesystemHealthy) {\n            throw new Error('FFmpeg 文件系统状态异常，无法进行转码');\n        }\n        \n        // 将文件写入 FFmpeg 文件系统\n        this.log('正在将文件写入 FFmpeg 文件系统...');\n        try {\n            await this.ffmpeg.writeFile('input.mp4', await fetchFile(this.originalFile));\n            this.log('文件写入完成');\n        } catch (fileError) {\n            this.log(`文件写入失败: ${fileError.message}`, 'error');\n            throw new Error(`无法写入文件到FFmpeg文件系统: ${fileError.message}`);\n        }\n        \n        // 根据流式处理模式选择转码方式\n        if (streamingMode === 'none') {\n            await this.normalConversion({\n                input: 'input.mp4',\n                output: outputFileName,\n                videoCodec,\n                crf,\n                preset,\n                threads,\n                performanceMode,\n                hardwareAcceleration,\n                outputFormat\n            });\n        } else if (streamingMode === 'segment') {\n            await this.segmentedConversion({\n                input: 'input.mp4',\n                output: outputFileName,\n                videoCodec,\n                crf,\n                preset,\n                threads,\n                performanceMode,\n                hardwareAcceleration,\n                outputFormat\n            });\n        } else if (streamingMode === 'realtime') {\n            await this.realtimeConversion({\n                input: 'input.mp4',\n                output: outputFileName,\n                videoCodec,\n                crf,\n                preset,\n                threads,\n                performanceMode,\n                hardwareAcceleration,\n                outputFormat\n            });\n        }\n        \n        // 清理 FFmpeg 文件系统\n        this.log('正在清理临时文件...');\n        try {\n            await this.ffmpeg.deleteFile('input.mp4');\n            this.log('已删除输入文件');\n        } catch (deleteError) {\n            this.log(`删除输入文件失败: ${deleteError.message}`, 'warning');\n        }\n        \n        try {\n            await this.ffmpeg.deleteFile(outputFileName);\n            this.log('已删除输出文件');\n        } catch (deleteError) {\n            this.log(`删除输出文件失败: ${deleteError.message}`, 'warning');\n        }\n        this.log('临时文件清理完成');\n        this.log('=== 转码完成 ===');\n    }\n\n    displayConvertedVideo(blob, filename) {\n        const container = document.getElementById('convertedVideoContainer');\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(blob);\n        video.controls = true;\n        video.autoplay = true;\n        video.muted = true; // 自动播放时需要静音\n        video.style.maxWidth = '100%';\n        video.style.maxHeight = '400px';\n        \n        container.innerHTML = '';\n        container.appendChild(video);\n        \n        // 添加下载链接\n        const downloadLink = document.createElement('a');\n        downloadLink.href = video.src;\n        downloadLink.download = filename;\n        downloadLink.textContent = `下载 ${filename}`;\n        downloadLink.style.display = 'block';\n        downloadLink.style.marginTop = '10px';\n        downloadLink.style.color = '#667eea';\n        downloadLink.style.textDecoration = 'none';\n        \n        container.appendChild(downloadLink);\n        \n        // 添加音量控制按钮\n        const volumeControl = document.createElement('button');\n        volumeControl.textContent = '🔊 取消静音';\n        volumeControl.style.marginTop = '10px';\n        volumeControl.style.padding = '8px 16px';\n        volumeControl.style.backgroundColor = '#667eea';\n        volumeControl.style.color = 'white';\n        volumeControl.style.border = 'none';\n        volumeControl.style.borderRadius = '5px';\n        volumeControl.style.cursor = 'pointer';\n        volumeControl.addEventListener('click', () => {\n            video.muted = !video.muted;\n            volumeControl.textContent = video.muted ? '🔊 取消静音' : '🔇 静音';\n            if (!video.muted && video.paused) {\n                video.play().catch(e => {\n                    this.log(`自动播放失败: ${e.message}`, 'warning');\n                });\n            }\n        });\n        container.appendChild(volumeControl);\n        \n        video.addEventListener('loadedmetadata', () => {\n            this.log(`转码后视频信息: ${video.videoWidth}x${video.videoHeight}, ${video.duration.toFixed(2)}秒`);\n            // 尝试自动播放\n            this.attemptAutoPlay(video);\n        });\n        \n        video.addEventListener('canplay', () => {\n            // 再次尝试自动播放\n            this.attemptAutoPlay(video);\n        });\n    }\n\n    updateProgress(progress) {\n        const progressFill = document.getElementById('progressFill');\n        const progressText = document.getElementById('progressText');\n        \n        // 检查进度数据的有效性\n        if (!progress || typeof progress !== 'object') {\n            this.log('进度数据无效', 'warning');\n            return;\n        }\n        \n        // 安全地计算百分比\n        let percentage = 0;\n        if (progress.ratio !== undefined && progress.ratio !== null && !isNaN(progress.ratio)) {\n            percentage = Math.round(progress.ratio * 100);\n        } else if (progress.progress !== undefined && progress.progress !== null && !isNaN(progress.progress)) {\n            percentage = Math.round(progress.progress * 100);\n        } else {\n            this.log('进度比率无效，使用默认值 0%', 'warning');\n        }\n        \n        // 限制百分比范围\n        percentage = Math.max(0, Math.min(100, percentage));\n        \n        progressFill.style.width = `${percentage}%`;\n        progressText.textContent = `转码进度: ${percentage}%`;\n        \n        // 处理时间信息\n        if (progress.time !== undefined && progress.time !== null && !isNaN(progress.time)) {\n            const time = this.formatTime(progress.time);\n            progressText.textContent += ` | 已处理: ${time}`;\n            \n            // 每10%进度记录一次日志\n            if (percentage % 10 === 0 && percentage > 0) {\n                this.log(`转码进度: ${percentage}% - 已处理时间: ${time}`);\n            }\n        }\n        \n        // 详细进度信息（仅在有完整时间信息时显示）\n        if (progress.duration !== undefined && progress.duration !== null && !isNaN(progress.duration) &&\n            progress.time !== undefined && progress.time !== null && !isNaN(progress.time)) {\n            const remaining = Math.max(0, progress.duration - progress.time);\n            const remainingFormatted = this.formatTime(remaining);\n            this.log(`详细进度: ${percentage}% | 已用: ${this.formatTime(progress.time)} | 剩余: ${remainingFormatted}`);\n        }\n        \n        // 记录原始进度数据用于调试\n        this.log(`原始进度数据: ${JSON.stringify(progress)}`, 'debug');\n    }\n\n    updatePerformanceMetrics() {\n        const metrics = this.performanceMetrics;\n        const performanceInfo = document.getElementById('performanceInfo');\n        \n        // 计算性能指标\n        const timeSeconds = (metrics.conversionTime / 1000).toFixed(2);\n        const sizeChange = ((metrics.convertedSize - metrics.originalSize) / metrics.originalSize * 100).toFixed(1);\n        const speed = (metrics.originalSize / 1024 / 1024 / (metrics.conversionTime / 1000)).toFixed(2);\n        \n        // 更新显示\n        document.getElementById('conversionTime').textContent = `${timeSeconds} 秒`;\n        document.getElementById('fileSizeChange').textContent = `${sizeChange > 0 ? '+' : ''}${sizeChange}%`;\n        document.getElementById('processingSpeed').textContent = `${speed} MB/s`;\n        \n        // 内存使用（估算）\n        if (performance.memory) {\n            const memoryMB = (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(1);\n            document.getElementById('memoryUsage').textContent = `${memoryMB} MB`;\n            metrics.memoryUsage = parseFloat(memoryMB);\n        } else {\n            document.getElementById('memoryUsage').textContent = '不支持';\n        }\n        \n        performanceInfo.style.display = 'block';\n        \n        this.log(`性能指标 - 时间: ${timeSeconds}s, 大小变化: ${sizeChange}%, 速度: ${speed}MB/s`);\n    }\n\n    log(message, type = 'info') {\n        // 调试信息处理\n        if (type === 'debug') {\n            if (this.debugMode) {\n                console.log(`[FFmpeg Demo DEBUG] ${message}`);\n                // 可选：在界面上显示调试信息\n                if (this.debugMode) {\n                    this.addToLogUI(message, type);\n                }\n            }\n            return;\n        }\n        \n        // 其他类型的日志信息\n        console.log(`[FFmpeg Demo] ${message}`);\n        this.addToLogUI(message, type);\n    }\n\n    // 添加日志到UI\n    addToLogUI(message, type = 'info') {\n        const logSection = document.getElementById('logSection');\n        const logContent = document.getElementById('logContent');\n        \n        if (!logSection || !logContent) {\n            console.warn('日志区域元素不存在');\n            return;\n        }\n        \n        logSection.style.display = 'block';\n        \n        const timestamp = new Date().toLocaleTimeString();\n        const logEntry = document.createElement('div');\n        logEntry.style.marginBottom = '4px';\n        \n        let color = '#00ff00';\n        if (type === 'error') color = '#ff4444';\n        if (type === 'warning') color = '#ffaa00';\n        if (type === 'debug') color = '#888888';\n        \n        logEntry.innerHTML = `<span style=\"color: #888\">${timestamp}</span> <span style=\"color: ${color}\">${message}</span>`;\n        \n        logContent.appendChild(logEntry);\n        logContent.scrollTop = logContent.scrollHeight;\n    }\n\n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    formatTime(seconds) {\n        const hrs = Math.floor(seconds / 3600);\n        const mins = Math.floor((seconds % 3600) / 60);\n        const secs = Math.floor(seconds % 60);\n        return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n\n    buildOptimizedCommand(options) {\n        const {\n            input,\n            output,\n            videoCodec,\n            crf,\n            preset,\n            threads,\n            performanceMode,\n            hardwareAcceleration,\n            outputFormat\n        } = options;\n\n        const command = ['-i', input];\n\n        // 硬件加速设置\n        if (hardwareAcceleration !== 'none') {\n            const hwAccel = this.getHardwareAccelerationParams(hardwareAcceleration, videoCodec);\n            command.push(...hwAccel);\n        }\n\n        // 性能模式优化\n        const performanceParams = this.getPerformanceParams(performanceMode, videoCodec, crf, preset);\n        command.push(...performanceParams);\n\n        // 线程设置\n        if (threads !== '0') {\n            command.push('-threads', threads);\n        }\n\n        // 音频设置\n        command.push('-c:a', 'aac', '-b:a', '128k');\n\n        // 容器格式特定设置\n        if (outputFormat === 'mp4') {\n            command.push('-movflags', '+faststart');\n        }\n\n        command.push('-y', output);\n        return command;\n    }\n\n    getHardwareAccelerationParams(hwType, videoCodec) {\n        const params = [];\n        \n        switch (hwType) {\n            case 'cuda':\n                params.push('-hwaccel', 'cuda');\n                if (videoCodec === 'libx264') {\n                    params.push('-c:v', 'h264_nvenc');\n                } else if (videoCodec === 'libx265') {\n                    params.push('-c:v', 'hevc_nvenc');\n                }\n                break;\n            case 'qsv':\n                params.push('-hwaccel', 'qsv');\n                if (videoCodec === 'libx264') {\n                    params.push('-c:v', 'h264_qsv');\n                } else if (videoCodec === 'libx265') {\n                    params.push('-c:v', 'hevc_qsv');\n                }\n                break;\n            case 'videotoolbox':\n                params.push('-hwaccel', 'videotoolbox');\n                if (videoCodec === 'libx264') {\n                    params.push('-c:v', 'h264_videotoolbox');\n                }\n                break;\n            case 'auto':\n                params.push('-hwaccel', 'auto');\n                break;\n        }\n        \n        return params;\n    }\n\n    getPerformanceParams(mode, videoCodec, crf, preset) {\n        const params = [];\n        \n        switch (mode) {\n            case 'speed':\n                // 速度优先：降低质量要求，使用更快的预设\n                params.push('-c:v', videoCodec);\n                params.push('-crf', Math.max(18, parseInt(crf) + 4).toString());\n                params.push('-preset', preset === 'veryslow' ? 'medium' : 'ultrafast');\n                params.push('-tune', 'fastdecode');\n                break;\n                \n            case 'quality':\n                // 质量优先：提高质量，使用更慢的预设\n                params.push('-c:v', videoCodec);\n                params.push('-crf', Math.min(30, parseInt(crf) - 2).toString());\n                params.push('-preset', preset === 'ultrafast' ? 'medium' : 'slow');\n                params.push('-tune', 'film');\n                break;\n                \n            case 'lowcpu':\n                // 低CPU占用：使用更快的预设，降低分辨率\n                params.push('-c:v', videoCodec);\n                params.push('-crf', Math.max(18, parseInt(crf) + 6).toString());\n                params.push('-preset', 'ultrafast');\n                params.push('-vf', 'scale=1280:-2'); // 限制宽度为1280px\n                break;\n                \n            default: // balanced\n                params.push('-c:v', videoCodec);\n                params.push('-crf', crf);\n                params.push('-preset', preset);\n                break;\n        }\n        \n        return params;\n    }\n\n    getPerformanceModeText(mode) {\n        const modes = {\n            'balanced': '平衡模式',\n            'speed': '速度优先',\n            'quality': '质量优先',\n            'lowcpu': '低CPU占用'\n        };\n        return modes[mode] || mode;\n    }\n\n    getHardwareAccelerationText(hwType) {\n        const types = {\n            'none': '无',\n            'auto': '自动检测',\n            'cuda': 'CUDA (NVIDIA)',\n            'qsv': 'Intel QSV',\n            'videotoolbox': 'VideoToolbox (Mac)'\n        };\n        return types[hwType] || hwType;\n    }\n\n    getStreamingModeText(mode) {\n        const modes = {\n            'none': '禁用',\n            'segment': '分段转码',\n            'realtime': '实时转码'\n        };\n        return modes[mode] || mode;\n    }\n\n    async normalConversion(options) {\n        const command = this.buildOptimizedCommand(options);\n        this.log(`执行命令: ffmpeg ${command.join(' ')}`);\n        this.log('开始转码处理，请稍候...');\n        \n        // 执行转码\n        try {\n            await this.ffmpeg.exec(command);\n            this.log('转码命令执行完成');\n        } catch (execError) {\n            this.log(`FFmpeg 执行失败: ${execError.message}`, 'error');\n            throw new Error(`转码执行失败: ${execError.message}`);\n        }\n        \n        // 读取转码后的文件\n        this.log('正在读取转码后的文件...');\n        let data;\n        try {\n            data = await this.ffmpeg.readFile(options.output);\n            const convertedBlob = new Blob([data], { type: `video/${options.outputFormat}` });\n            this.log(`转码后文件大小: ${this.formatFileSize(convertedBlob.size)}`);\n            \n            this.performanceMetrics.convertedSize = convertedBlob.size;\n            this.performanceMetrics.conversionTime = performance.now() - this.startTime;\n            \n            // 显示转码后的视频\n            this.log('正在生成转码后的视频预览...');\n            this.displayConvertedVideo(convertedBlob, options.output);\n            \n            // 更新性能指标\n            this.updatePerformanceMetrics();\n        } catch (readError) {\n            this.log(`读取转码后文件失败: ${readError.message}`, 'error');\n            throw new Error(`无法读取转码后的文件: ${readError.message}`);\n        }\n    }\n\n    async segmentedConversion(options) {\n        this.log('开始分段转码处理...');\n        \n        // 分段转码：将视频分成多个小段进行处理\n        const segmentDuration = 10; // 每段10秒\n        const segments = [];\n        \n        // 创建分段列表文件\n        const segmentList = [];\n        \n        // 简化的分段处理（在实际应用中需要更复杂的逻辑）\n        for (let i = 0; i < 5; i++) { // 假设分成5段\n            const startTime = i * segmentDuration;\n            const segmentName = `segment_${i}.${options.outputFormat}`;\n            \n            const command = [\n                '-ss', startTime.toString(),\n                '-i', options.input,\n                '-t', segmentDuration.toString(),\n                '-c:v', options.videoCodec,\n                '-crf', options.crf,\n                '-preset', options.preset,\n                '-c:a', 'aac',\n                '-b:a', '128k',\n                '-y', segmentName\n            ];\n            \n            this.log(`转码第 ${i + 1} 段 (开始时间: ${startTime}s)...`);\n            try {\n                await this.ffmpeg.exec(command);\n            } catch (execError) {\n                this.log(`第 ${i + 1} 段转码失败: ${execError.message}`, 'error');\n                // 继续处理下一段，而不是中断整个过程\n                continue;\n            }\n            \n            // 读取分段数据\n            const segmentData = await this.ffmpeg.readFile(segmentName);\n            segments.push(segmentData);\n            segmentList.push(segmentName);\n            \n            // 清理分段文件\n            await this.ffmpeg.deleteFile(segmentName);\n            \n            this.log(`第 ${i + 1} 段转码完成`);\n        }\n        \n        // 合并所有分段\n        this.log('合并分段文件...');\n        const combinedData = new Blob(segments, { type: `video/${options.outputFormat}` });\n        \n        this.performanceMetrics.convertedSize = combinedData.size;\n        this.performanceMetrics.conversionTime = performance.now() - this.startTime;\n        \n        // 显示转码后的视频\n        this.log('正在生成转码后的视频预览...');\n        this.displayConvertedVideo(combinedData, options.output);\n        \n        // 更新性能指标\n        this.updatePerformanceMetrics();\n        \n        this.log('分段转码完成');\n    }\n\n    async realtimeConversion(options) {\n        this.log('开始实时转码和流式播放...');\n        \n        let streamingAttempt = 0;\n        const maxStreamingAttempts = 2;\n        \n        while (streamingAttempt < maxStreamingAttempts) {\n            streamingAttempt++;\n            this.log(`流式播放尝试 ${streamingAttempt}/${maxStreamingAttempts}`);\n            \n            try {\n                // 重置状态\n                this.supportedMimeType = null;\n                this.isStreaming = true;\n                this.streamQueue = [];\n                \n                // 重置缓冲区监控数据\n                this.bufferMonitor = {\n                    totalChunksAdded: 0,\n                    totalChunksProcessed: 0,\n                    totalBytesProcessed: 0,\n                    lastErrorTime: null,\n                    consecutiveErrors: 0,\n                    bufferHealth: 'good',\n                    lastBufferCheck: Date.now()\n                };\n                \n                // 启动性能监控\n                this.startPerformanceMonitoring();\n                \n                // 初始化MediaSource\n                await this.initMediaSource();\n                \n                // 实时转码：分片处理\n                const chunkDuration = 8; // 增加到每片8秒，提高播放连续性\n                let currentChunk = 0;\n                let totalDuration = 0;\n                let consecutiveErrors = 0;\n                const maxConsecutiveErrors = 3;\n                \n                // 获取视频总时长\n                totalDuration = await this.getVideoDuration(options.input);\n                this.log(`视频总时长: ${totalDuration}秒`);\n                \n                // 设置 SourceBuffer 时间戳偏移\n                if (this.sourceBuffer) {\n                    this.sourceBuffer.timestampOffset = 0;\n                    this.log('设置 SourceBuffer 时间戳偏移为 0');\n                }\n                \n                // 分片转码和播放\n                while (currentChunk * chunkDuration < totalDuration && this.isStreaming) {\n                    if (consecutiveErrors >= maxConsecutiveErrors) {\n                        this.log('连续错误过多，停止流式播放', 'error');\n                        throw new Error('流式播放连续错误过多');\n                    }\n                    \n                    const startTime = currentChunk * chunkDuration;\n                    let chunkExtension = '.ts';\n                    \n                    // 根据支持的MIME类型确定文件扩展名\n                    if (this.supportedMimeType) {\n                        if (this.supportedMimeType.includes('video/mp4')) {\n                            chunkExtension = '.mp4';\n                        } else if (this.supportedMimeType.includes('video/webm')) {\n                            chunkExtension = '.webm';\n                        }\n                    }\n                    \n                    const chunkName = `chunk_${currentChunk}${chunkExtension}`;\n                    \n                    try {\n                        this.log(`转码第 ${currentChunk + 1} 片 (开始时间: ${startTime}s, 时长: ${chunkDuration}s)...`);\n                        \n                        // 转码当前分片\n                        await this.transcodeChunk({\n                            input: options.input,\n                            output: chunkName,\n                            startTime,\n                            duration: chunkDuration,\n                            videoCodec: options.videoCodec,\n                            crf: options.crf,\n                            preset: 'ultrafast',\n                            outputFormat: chunkExtension.substring(1) // 去掉点号\n                        });\n                        \n                        // 读取分片数据并添加到播放队列\n                        let chunkData;\n                        try {\n                            chunkData = await this.ffmpeg.readFile(chunkName);\n                            console.log('读取分片数据成功', chunkData);\n                            \n                            // 更新时间戳偏移以确保连续播放\n                            if (this.sourceBuffer && currentChunk > 0) {\n                                this.sourceBuffer.timestampOffset = startTime;\n                                this.log(`更新时间戳偏移为: ${startTime}s`);\n                            }\n                            \n                            await this.addChunkToStreamWithRetry(chunkData, 3);\n                        } catch (readError) {\n                            this.log(`读取分片文件失败: ${readError.message}`, 'error');\n                            throw new Error(`无法读取分片文件: ${readError.message}`);\n                        }\n                        \n                        // 清理分片文件\n                        try {\n                            await this.ffmpeg.deleteFile(chunkName);\n                        } catch (deleteError) {\n                            this.log(`删除分片文件失败: ${deleteError.message}`, 'warning');\n                        }\n                        \n                        currentChunk++;\n                        consecutiveErrors = 0; // 重置错误计数\n                        this.log(`第 ${currentChunk} 片已添加到播放队列 (已处理时长: ${currentChunk * chunkDuration}s)`);\n                        \n                        // 添加小延迟避免过度占用CPU\n                        await new Promise(resolve => setTimeout(resolve, 200));\n                        \n                    } catch (chunkError) {\n                        consecutiveErrors++;\n                        this.log(`转码第 ${currentChunk + 1} 片失败: ${chunkError.message}`, 'error');\n                        console.error('分片转码错误:', chunkError);\n                        \n                        // 如果是最后一个分片，可以忽略错误\n                        if (currentChunk * chunkDuration >= totalDuration - chunkDuration) {\n                            this.log('已处理到最后一个分片，忽略错误', 'warning');\n                            break;\n                        }\n                        \n                        // 短暂等待后重试\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n                    }\n                }\n                \n                this.log('所有分片转码完成');\n                break; // 成功完成，退出重试循环\n                \n            } catch (error) {\n                this.log(`流式播放尝试 ${streamingAttempt} 失败: ${error.message}`, 'error');\n                console.error('实时转码错误:', error);\n                \n                // 清理当前失败的流式播放\n                this.stopStreaming();\n                \n                if (streamingAttempt >= maxStreamingAttempts) {\n                    this.log('流式播放多次尝试失败，降级到普通转码模式', 'warning');\n                    await this.fallbackToNormalConversion(options);\n                    return;\n                }\n                \n                // 等待一段时间后重试\n                this.log('等待 2 秒后重试...');\n                await new Promise(resolve => setTimeout(resolve, 2000));\n            } finally {\n                this.isStreaming = false;\n                // 停止性能监控\n                this.stopPerformanceMonitoring();\n            }\n        }\n        \n        this.performanceMetrics.conversionTime = performance.now() - this.startTime;\n        this.updatePerformanceMetrics();\n        \n        this.log('实时转码和流式播放完成');\n    }\n\n    async initMediaSource() {\n        return new Promise((resolve, reject) => {\n            if (!window.MediaSource) {\n                reject(new Error('浏览器不支持MediaSource API'));\n                return;\n            }\n            \n            this.mediaSource = new MediaSource();\n            this.mediaSource.addEventListener('sourceopen', () => {\n                this.log('MediaSource已打开');\n                \n                try {\n                    // 尝试多种 MIME 类型，按优先级排序（MPEG-TS优先）\n                    const mimeTypes = [\n                        'video/mp2t; codecs=\"avc1.42E01E,mp4a.40.2\"',\n                        'video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"',\n                        'video/webm; codecs=\"vp9,opus\"'\n                    ];\n                    \n                    let supportedMimeType = null;\n                    for (const mimeType of mimeTypes) {\n                        this.log(`检查 MIME 类型支持: ${mimeType}`);\n                        if (MediaSource.isTypeSupported(mimeType)) {\n                            supportedMimeType = mimeType;\n                            break;\n                        }\n                    }\n                    \n                    if (!supportedMimeType) {\n                        reject(new Error('浏览器不支持任何流媒体视频格式'));\n                        return;\n                    }\n                    \n                    this.log(`使用支持的 MIME 类型: ${supportedMimeType}`);\n                    this.supportedMimeType = supportedMimeType;\n                    this.sourceBuffer = this.mediaSource.addSourceBuffer(supportedMimeType);\n                    console.log('SourceBuffer 创建成功', this.sourceBuffer);\n                    \n                    // 添加事件监听器\n                    this.sourceBuffer.addEventListener('updateend', () => {\n                        this.processStreamQueue();\n                    });\n                    \n                    this.sourceBuffer.addEventListener('error', (e) => {\n                        const errorMessage = e.message || e.error || JSON.stringify(e);\n                        this.log(`SourceBuffer错误: ${errorMessage}`, 'error');\n                        console.error('SourceBuffer错误详情:', e);\n                        \n                        // 增强的错误诊断\n                        this.diagnoseSourceBufferError(e);\n                    });\n                    \n                    this.sourceBuffer.addEventListener('abort', (e) => {\n                        this.log('SourceBuffer操作被中止', 'warning');\n                    });\n                    \n                    this.log('SourceBuffer创建成功');\n                    resolve();\n                } catch (error) {\n                    this.log(`创建SourceBuffer失败: ${error.message}`, 'error');\n                    console.error('创建SourceBuffer失败详情:', error);\n                    reject(error);\n                }\n            });\n            \n            this.mediaSource.addEventListener('error', (e) => {\n                const errorMessage = e.message || e.error || JSON.stringify(e);\n                this.log(`MediaSource错误: ${errorMessage}`, 'error');\n                console.error('MediaSource错误详情:', e);\n            });\n            \n            // 创建流式播放视频元素\n            this.createStreamingVideo();\n        });\n    }\n\n    createStreamingVideo() {\n        const container = document.getElementById('convertedVideoContainer');\n        container.innerHTML = '';\n        \n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(this.mediaSource);\n        video.controls = true;\n        video.autoplay = true;\n        video.muted = true; // 自动播放时需要静音\n        video.style.maxWidth = '100%';\n        video.style.maxHeight = '400px';\n        video.style.backgroundColor = '#000';\n        \n        // 添加视频错误处理\n        video.addEventListener('error', (e) => {\n            this.log(`视频元素错误: ${video.error ? video.error.message : '未知错误'}`, 'error');\n            this.updateStreamingStatus('视频播放错误');\n            this.stopStreaming();\n        });\n        \n        container.appendChild(video);\n        \n        // 添加播放状态显示\n        const statusDiv = document.createElement('div');\n        statusDiv.id = 'streamingStatus';\n        statusDiv.style.marginTop = '10px';\n        statusDiv.style.padding = '10px';\n        statusDiv.style.backgroundColor = '#f0f0f0';\n        statusDiv.style.borderRadius = '5px';\n        statusDiv.style.fontSize = '14px';\n        statusDiv.textContent = '正在准备流式播放...';\n        container.appendChild(statusDiv);\n        \n        // 添加音量控制按钮\n        const volumeControl = document.createElement('button');\n        volumeControl.textContent = '🔊 取消静音';\n        volumeControl.style.marginTop = '10px';\n        volumeControl.style.padding = '8px 16px';\n        volumeControl.style.backgroundColor = '#667eea';\n        volumeControl.style.color = 'white';\n        volumeControl.style.border = 'none';\n        volumeControl.style.borderRadius = '5px';\n        volumeControl.style.cursor = 'pointer';\n        volumeControl.addEventListener('click', () => {\n            video.muted = !video.muted;\n            volumeControl.textContent = video.muted ? '🔊 取消静音' : '🔇 静音';\n            if (!video.muted && video.paused) {\n                video.play().catch(e => {\n                    this.log(`自动播放失败: ${e.message}`, 'warning');\n                });\n            }\n        });\n        container.appendChild(volumeControl);\n        \n        video.addEventListener('loadstart', () => {\n            this.updateStreamingStatus('开始加载...');\n        });\n        \n        video.addEventListener('loadedmetadata', () => {\n            this.updateStreamingStatus('元数据加载完成');\n            // 尝试自动播放\n            this.attemptAutoPlay(video);\n        });\n        \n        video.addEventListener('canplay', () => {\n            this.updateStreamingStatus('可以播放');\n            // 再次尝试自动播放\n            this.attemptAutoPlay(video);\n        });\n        \n        video.addEventListener('play', () => {\n            this.updateStreamingStatus('正在播放');\n        });\n        \n        video.addEventListener('pause', () => {\n            this.updateStreamingStatus('已暂停');\n        });\n        \n        video.addEventListener('waiting', () => {\n            this.updateStreamingStatus('缓冲中...');\n        });\n        \n        video.addEventListener('playing', () => {\n            this.updateStreamingStatus('正在播放');\n        });\n        \n        video.addEventListener('ended', () => {\n            this.updateStreamingStatus('播放结束');\n        });\n        \n        video.addEventListener('stalled', () => {\n            this.updateStreamingStatus('网络卡顿');\n        });\n        \n        // 监听第一个分片添加成功后尝试播放\n        this.waitForFirstChunkAndPlay(video);\n    }\n\n    updateStreamingStatus(status) {\n        const statusDiv = document.getElementById('streamingStatus');\n        if (statusDiv) {\n            statusDiv.textContent = `流式播放状态: ${status}`;\n        }\n    }\n\n    // 尝试自动播放视频\n    async attemptAutoPlay(video) {\n        // 检查视频元素和 MediaSource 状态\n        if (!video || !this.mediaSource || this.mediaSource.readyState !== 'open') {\n            this.log('视频或 MediaSource 不可用，无法自动播放', 'warning');\n            return;\n        }\n        \n        // 检查是否有足够的数据可以播放\n        if (this.sourceBuffer && this.sourceBuffer.buffered.length > 0) {\n            const bufferedEnd = this.sourceBuffer.buffered.end(this.sourceBuffer.buffered.length - 1);\n            if (bufferedEnd < 2) { // 至少需要2秒的数据\n                this.log('缓冲数据不足，等待更多数据...', 'warning');\n                return;\n            }\n        }\n        \n        if (video.paused) {\n            try {\n                await video.play();\n                this.log('视频自动播放成功');\n                this.updateStreamingStatus('正在播放');\n            } catch (error) {\n                this.log(`自动播放失败: ${error.message}`, 'warning');\n                // 如果自动播放失败，显示用户交互提示\n                this.updateStreamingStatus('点击播放按钮开始播放');\n            }\n        }\n    }\n\n    // 等待第一个分片添加后尝试播放\n    waitForFirstChunkAndPlay(video) {\n        const checkInterval = setInterval(() => {\n            // 安全检查：确保 SourceBuffer 仍然有效\n            if (!this.sourceBuffer || !this.mediaSource || this.mediaSource.readyState !== 'open') {\n                clearInterval(checkInterval);\n                this.log('MediaSource 或 SourceBuffer 已不可用', 'warning');\n                return;\n            }\n            \n            // 检查是否有数据\n            let hasData = false;\n            try {\n                hasData = this.streamQueue.length > 0 || (this.sourceBuffer && this.sourceBuffer.buffered.length > 0);\n            } catch (error) {\n                // 如果访问 buffered 属性出错，说明 SourceBuffer 已被移除\n                clearInterval(checkInterval);\n                this.log('SourceBuffer 已被移除，停止等待', 'warning');\n                return;\n            }\n            \n            if (hasData) {\n                clearInterval(checkInterval);\n                this.log('检测到视频数据，尝试自动播放');\n                setTimeout(() => {\n                    this.attemptAutoPlay(video);\n                }, 500); // 稍微延迟确保数据已准备好\n            }\n        }, 100);\n\n        // 30秒后停止检查\n        setTimeout(() => {\n            clearInterval(checkInterval);\n            if (video && video.paused) {\n                this.log('等待视频数据超时', 'warning');\n            }\n        }, 30000);\n    }\n\n  \n    async transcodeChunk(options) {\n        // 优先使用MPEG-TS格式，因为它对流式播放更友好\n        let outputFormat = 'mpegts';\n        let outputExtension = '.ts';\n        \n        if (this.supportedMimeType) {\n            // 即使支持MP4，也优先使用MPEG-TS进行流式播放\n            if (this.supportedMimeType.includes('video/mp2t')) {\n                outputFormat = 'mpegts';\n                outputExtension = '.ts';\n            } else if (this.supportedMimeType.includes('video/mp4')) {\n                // 只有在明确需要MP4时才使用\n                outputFormat = 'mp4';\n                outputExtension = '.mp4';\n            } else if (this.supportedMimeType.includes('video/webm')) {\n                outputFormat = 'webm';\n                outputExtension = '.webm';\n            }\n        }\n        \n        this.log(`使用输出格式: ${outputFormat}`);\n        \n        // 为流式播放优化的FFmpeg命令\n        let command = [];\n        \n        if (outputFormat === 'mpegts') {\n            // MPEG-TS格式的优化命令\n            command = [\n                '-ss', options.startTime.toString(),\n                '-i', options.input,\n                '-t', options.duration.toString(),\n                '-c:v', options.videoCodec,\n                '-crf', options.crf,\n                '-preset', 'ultrafast',\n                '-c:a', 'aac',\n                '-b:a', '128k',\n                '-mpegts_m2ts_mode', '1',\n                '-f', 'mpegts',\n                '-y', options.output\n            ];\n        } else {\n            // MP4/WebM格式的命令\n            command = [\n                '-ss', options.startTime.toString(),\n                '-i', options.input,\n                '-t', options.duration.toString(),\n                '-c:v', options.videoCodec,\n                '-crf', options.crf,\n                '-preset', 'ultrafast',\n                '-c:a', 'aac',\n                '-b:a', '128k',\n                '-profile:v', 'baseline',\n                '-level', '3.0',\n                '-movflags', '+frag_keyframe+empty_moov+faststart+default_base_moof',\n                '-frag_duration', options.duration.toString(),\n                '-f', outputFormat,\n                '-y', options.output\n            ];\n        }\n        \n        try {\n            await this.ffmpeg.exec(command);\n            this.log(`分片转码完成: ${options.output} (开始时间: ${options.startTime}s, 时长: ${options.duration}s)`);\n        } catch (execError) {\n            this.log(`分片转码失败: ${execError.message}`, 'error');\n            throw new Error(`分片转码失败: ${execError.message}`);\n        }\n    }\n\n    addChunkToStream(chunkData) {\n        if (!this.isStreaming) {\n            this.log('流式播放已停止，跳过添加分片', 'warning');\n            return;\n        }\n        \n        this.streamQueue.push(chunkData);\n        \n        // 如果是第一个分片，记录日志并准备播放\n        if (this.streamQueue.length === 1) {\n            this.log('第一个视频分片已添加，准备播放');\n        }\n        \n        this.processStreamQueue();\n    }\n\n    // 带重试的添加分片到流\n    async addChunkToStreamWithRetry(chunkData, maxRetries = 3) {\n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n            try {\n                this.log(`尝试添加分片到流 (第 ${attempt} 次)`);\n                \n                // 返回一个新的 Promise 来跟踪添加操作\n                return new Promise((resolve, reject) => {\n                    const originalAddChunk = () => {\n                        if (!this.isStreaming) {\n                            reject(new Error('流式播放已停止'));\n                            return;\n                        }\n                        \n                        this.streamQueue.push(chunkData);\n                        this.processStreamQueue();\n                        \n                        // 等待处理完成或超时\n                        const timeout = setTimeout(() => {\n                            if (this.streamQueue.length === 0) {\n                                resolve(); // 成功处理\n                            } else {\n                                reject(new Error('添加分片超时'));\n                            }\n                        }, 5000);\n                        \n                        // 监听队列处理\n                        const checkQueue = setInterval(() => {\n                            if (this.streamQueue.length === 0) {\n                                clearTimeout(timeout);\n                                clearInterval(checkQueue);\n                                resolve();\n                            }\n                        }, 100);\n                    };\n                    \n                    originalAddChunk();\n                });\n                \n            } catch (error) {\n                this.log(`第 ${attempt} 次添加分片失败: ${error.message}`, 'warning');\n                \n                if (attempt === maxRetries) {\n                    throw new Error(`添加分片到流失败，已重试 ${maxRetries} 次`);\n                }\n                \n                // 等待后重试\n                await new Promise(resolve => setTimeout(resolve, 1000));\n            }\n        }\n    }\n\n    // 降级到普通转码模式\n    async fallbackToNormalConversion(options) {\n        this.log('开始降级到普通转码模式...', 'warning');\n        \n        try {\n            // 更新UI状态\n            this.updateStreamingStatus('正在降级到普通转码模式...');\n            \n            // 执行普通转码\n            await this.normalConversion(options);\n            \n            this.log('已成功降级到普通转码模式', 'info');\n            \n        } catch (error) {\n            this.log(`降级转码也失败: ${error.message}`, 'error');\n            throw error;\n        }\n    }\n\n    processStreamQueue() {\n        // 基本状态检查\n        if (!this.sourceBuffer || !this.mediaSource || this.mediaSource.readyState !== 'open') {\n            this.log('MediaSource 或 SourceBuffer 不可用，停止处理队列', 'warning');\n            this.streamQueue = [];\n            return;\n        }\n        \n        if (this.sourceBuffer.updating || this.streamQueue.length === 0) {\n            return;\n        }\n        \n        // 检查视频元素状态\n        const video = document.querySelector('#convertedVideoContainer video');\n        if (video && video.error) {\n            this.log(`视频元素错误: ${video.error.message}`, 'error');\n            this.stopStreaming();\n            return;\n        }\n        \n        // 智能缓冲区管理\n        const bufferStatus = this.analyzeBufferHealth();\n        if (bufferStatus.shouldWait) {\n            this.log(bufferStatus.message, 'warning');\n            setTimeout(() => this.processStreamQueue(), bufferStatus.waitTime);\n            return;\n        }\n        \n        const chunk = this.streamQueue.shift();\n        try {\n            this.log(`正在添加分片到SourceBuffer，大小: ${chunk.length} 字节`);\n            \n            // 更新监控数据\n            this.bufferMonitor.totalChunksAdded++;\n            this.bufferMonitor.totalBytesProcessed += chunk.length;\n            \n            // 添加错误监听器用于这个特定的 appendBuffer 操作\n            const errorHandler = (event) => {\n                this.sourceBuffer.removeEventListener('error', errorHandler);\n                this.bufferMonitor.lastErrorTime = Date.now();\n                this.bufferMonitor.consecutiveErrors++;\n                this.bufferMonitor.bufferHealth = 'poor';\n                this.log(`分片添加过程中发生错误`, 'error');\n                this.handleSourceBufferErrorRecovery();\n            };\n            \n            this.sourceBuffer.addEventListener('error', errorHandler);\n            \n            // 使用 setTimeout 确保错误监听器已设置\n            setTimeout(() => {\n                try {\n                    this.sourceBuffer.appendBuffer(chunk);\n                    this.log(`已添加分片到播放队列，剩余队列: ${this.streamQueue.length}`);\n                    \n                    // 更新监控数据\n                    this.bufferMonitor.totalChunksProcessed++;\n                    this.bufferMonitor.consecutiveErrors = 0;\n                    this.bufferMonitor.bufferHealth = 'good';\n                    \n                    // 移除临时错误监听器\n                    this.sourceBuffer.removeEventListener('error', errorHandler);\n                    \n                    // 检查是否应该触发播放\n                    if (video && video.paused) {\n                        const bufferedLength = this.sourceBuffer.buffered.length;\n                        let totalBufferedDuration = 0;\n                        \n                        if (bufferedLength > 0) {\n                            const lastBufferedEnd = this.sourceBuffer.buffered.end(bufferedLength - 1);\n                            totalBufferedDuration = lastBufferedEnd;\n                        }\n                        \n                        // 如果有足够的缓冲数据，尝试播放\n                        if (totalBufferedDuration >= 3) { // 至少3秒数据\n                            setTimeout(() => {\n                                this.attemptAutoPlay(video);\n                            }, 500);\n                        }\n                    }\n                } catch (appendError) {\n                    this.sourceBuffer.removeEventListener('error', errorHandler);\n                    this.handleAppendError(appendError, chunk);\n                }\n            }, 0);\n            \n        } catch (error) {\n            this.log(`添加分片失败: ${error.message}`, 'error');\n            console.error('SourceBuffer appendBuffer error:', error);\n            this.handleAppendError(error, chunk);\n        }\n    }\n\n    // 分析缓冲区健康状态\n    analyzeBufferHealth() {\n        const result = {\n            shouldWait: false,\n            waitTime: 1000,\n            message: ''\n        };\n        \n        try {\n            const video = document.querySelector('#convertedVideoContainer video');\n            \n            if (!this.sourceBuffer || !this.sourceBuffer.buffered || this.sourceBuffer.buffered.length === 0) {\n                // 缓冲区为空，可以添加\n                return result;\n            }\n            \n            const bufferedEnd = this.sourceBuffer.buffered.end(this.sourceBuffer.buffered.length - 1);\n            const currentTime = video ? video.currentTime : 0;\n            const bufferAhead = bufferedEnd - currentTime;\n            \n            // 检查缓冲区长度\n            if (this.sourceBuffer.buffered.length > 5) {\n                result.shouldWait = true;\n                result.message = '缓冲区段数过多，暂停添加';\n                result.waitTime = 2000;\n                return result;\n            }\n            \n            // 检查缓冲区提前量\n            if (bufferAhead > 30) {\n                result.shouldWait = true;\n                result.message = `缓冲区提前过多 (${bufferAhead.toFixed(1)}s)，暂停添加`;\n                result.waitTime = 2000;\n                return result;\n            }\n            \n            // 检查队列长度\n            if (this.streamQueue.length > 5) {\n                result.shouldWait = true;\n                result.message = '队列过长，暂停添加';\n                result.waitTime = 500;\n                return result;\n            }\n            \n            // 检查内存使用情况\n            if (performance.memory) {\n                const usedHeapSize = performance.memory.usedJSHeapSize;\n                const totalHeapSize = performance.memory.totalJSHeapSize;\n                const memoryUsage = usedHeapSize / totalHeapSize;\n                \n                if (memoryUsage > 0.8) {\n                    result.shouldWait = true;\n                    result.message = `内存使用过高 (${(memoryUsage * 100).toFixed(1)}%)，暂停添加`;\n                    result.waitTime = 5000;\n                    return result;\n                }\n            }\n            \n        } catch (error) {\n            this.log(`分析缓冲区健康状态失败: ${error.message}`, 'warning');\n            result.shouldWait = true;\n            result.message = '缓冲区分析失败，暂停添加';\n            result.waitTime = 2000;\n        }\n        \n        return result;\n    }\n\n    // 启动性能监控\n    startPerformanceMonitoring() {\n        if (this.performanceMonitor) {\n            clearInterval(this.performanceMonitor);\n        }\n        \n        this.performanceMonitor = setInterval(() => {\n            this.logPerformanceStats();\n        }, 10000); // 每10秒记录一次\n    }\n\n    // 停止性能监控\n    stopPerformanceMonitoring() {\n        if (this.performanceMonitor) {\n            clearInterval(this.performanceMonitor);\n            this.performanceMonitor = null;\n        }\n    }\n\n    // 记录性能统计\n    logPerformanceStats() {\n        const stats = {\n            totalChunksAdded: this.bufferMonitor.totalChunksAdded,\n            totalChunksProcessed: this.bufferMonitor.totalChunksProcessed,\n            totalBytesProcessed: this.bufferMonitor.totalBytesProcessed,\n            queueLength: this.streamQueue.length,\n            bufferHealth: this.bufferMonitor.bufferHealth,\n            consecutiveErrors: this.bufferMonitor.consecutiveErrors,\n            isStreaming: this.isStreaming,\n            memoryUsage: this.performanceMetrics.memoryUsage\n        };\n        \n        this.log(`性能统计: ${JSON.stringify(stats)}`, 'debug');\n        \n        // 如果连续错误过多，触发恢复机制\n        if (stats.consecutiveErrors > 5) {\n            this.log('检测到连续错误过多，触发恢复机制', 'warning');\n            this.handleSourceBufferErrorRecovery();\n        }\n    }\n\n    // 处理 appendBuffer 错误\n    handleAppendError(error, chunk) {\n        this.log(`处理 appendBuffer 错误: ${error.name} - ${error.message}`, 'error');\n        \n        // 根据错误类型采取不同的恢复策略\n        switch (error.name) {\n            case 'QuotaExceededError':\n                this.log('缓冲区配额超出，尝试清理旧数据', 'warning');\n                this.handleBufferQuotaExceeded();\n                break;\n                \n            case 'InvalidStateError':\n                this.log('SourceBuffer 状态无效，尝试恢复', 'warning');\n                this.handleSourceBufferErrorRecovery();\n                break;\n                \n            case 'NotSupportedError':\n                this.log('不支持的数据格式，尝试重新初始化MediaSource', 'warning');\n                this.handleFormatIncompatibility();\n                break;\n                \n            default:\n                this.log(`未知错误类型: ${error.name}，尝试恢复`, 'warning');\n                this.handleSourceBufferErrorRecovery();\n                break;\n        }\n    }\n\n    // 处理格式不兼容\n    handleFormatIncompatibility() {\n        this.log('处理格式不兼容问题...', 'warning');\n        \n        // 如果当前使用的是MPEG-TS格式，尝试切换到MP4\n        if (this.supportedMimeType && this.supportedMimeType.includes('video/mp2t')) {\n            this.log('当前使用MPEG-TS格式，尝试切换到MP4格式', 'info');\n            \n            // 停止当前流\n            this.stopStreaming();\n            \n            // 重新初始化，优先使用MP4\n            setTimeout(() => {\n                if (this.isStreaming) {\n                    this.log('重新初始化MediaSource，优先使用MP4格式', 'info');\n                    // 临时修改MIME类型优先级\n                    const originalSupportedMimeType = this.supportedMimeType;\n                    this.supportedMimeType = 'video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"';\n                    \n                    this.initMediaSource().catch(error => {\n                        this.log(`重新初始化失败: ${error.message}`, 'error');\n                        this.supportedMimeType = originalSupportedMimeType;\n                    });\n                }\n            }, 2000);\n        } else {\n            // 如果不是MPEG-TS格式，直接停止流式播放\n            this.stopStreaming();\n        }\n    }\n\n    // 处理缓冲区配额超出\n    handleBufferQuotaExceeded() {\n        try {\n            if (this.sourceBuffer && this.sourceBuffer.buffered.length > 1) {\n                // 移除最早的缓冲区段\n                const removeEnd = this.sourceBuffer.buffered.start(1);\n                this.sourceBuffer.remove(0, removeEnd);\n                this.log(`已移除 0-${removeEnd.toFixed(2)} 的缓冲区`, 'info');\n                \n                // 等待移除完成后继续处理\n                setTimeout(() => this.processStreamQueue(), 100);\n            } else {\n                // 没有可移除的段，停止流式播放\n                this.log('缓冲区已满且无法清理，停止流式播放', 'warning');\n                this.stopStreaming();\n            }\n        } catch (error) {\n            this.log(`清理缓冲区失败: ${error.message}`, 'error');\n            this.stopStreaming();\n        }\n    }\n\n    stopStreaming() {\n        this.log('正在停止流式播放...', 'info');\n        this.isStreaming = false;\n        \n        // 清空队列\n        this.streamQueue = [];\n        \n        // 安全地清理 MediaSource 和 SourceBuffer\n        this.cleanupMediaSource();\n        \n        this.updateStreamingStatus('流式播放已停止');\n        this.log('流式播放已停止');\n    }\n\n    // 清理 MediaSource 资源\n    cleanupMediaSource() {\n        try {\n            // 清理 SourceBuffer\n            if (this.sourceBuffer) {\n                try {\n                    // 移除所有事件监听器\n                    this.sourceBuffer.removeEventListener('updateend', this.processStreamQueue);\n                    this.sourceBuffer.removeEventListener('error', this.handleSourceBufferError);\n                    \n                    // 如果 SourceBuffer 仍在更新，等待完成\n                    if (this.sourceBuffer.updating) {\n                        this.log('等待 SourceBuffer 更新完成...', 'debug');\n                        setTimeout(() => this.cleanupMediaSource(), 100);\n                        return;\n                    }\n                    \n                    // 从 MediaSource 中移除 SourceBuffer\n                    if (this.mediaSource && this.mediaSource.sourceBuffers.length > 0) {\n                        this.mediaSource.removeSourceBuffer(this.sourceBuffer);\n                        this.log('已从 MediaSource 移除 SourceBuffer', 'debug');\n                    }\n                } catch (sbError) {\n                    this.log(`移除 SourceBuffer 失败: ${sbError.message}`, 'warning');\n                } finally {\n                    this.sourceBuffer = null;\n                }\n            }\n            \n            // 清理 MediaSource\n            if (this.mediaSource) {\n                try {\n                    if (this.mediaSource.readyState === 'open') {\n                        this.mediaSource.endOfStream();\n                        this.log('MediaSource 流已结束', 'debug');\n                    }\n                } catch (msError) {\n                    this.log(`结束 MediaSource 流失败: ${msError.message}`, 'warning');\n                } finally {\n                    this.mediaSource = null;\n                }\n            }\n            \n            // 清理视频元素的 MediaSource URL\n            const video = document.querySelector('#convertedVideoContainer video');\n            if (video && video.src.startsWith('blob:')) {\n                URL.revokeObjectURL(video.src);\n                this.log('已清理视频元素的 MediaSource URL', 'debug');\n            }\n            \n        } catch (cleanupError) {\n            this.log(`清理 MediaSource 资源时出错: ${cleanupError.message}`, 'error');\n            console.error('清理资源失败:', cleanupError);\n        }\n    }\n\n    // 诊断 SourceBuffer 错误\n    diagnoseSourceBufferError(errorEvent) {\n        try {\n            this.log('=== SourceBuffer 错误诊断 ===', 'debug');\n            \n            // 检查 MediaSource 状态\n            if (this.mediaSource) {\n                this.log(`MediaSource 状态: ${this.mediaSource.readyState}`, 'debug');\n            } else {\n                this.log('MediaSource 对象不存在', 'error');\n            }\n            \n            // 检查 SourceBuffer 状态\n            if (this.sourceBuffer) {\n                this.log(`SourceBuffer 更新状态: ${this.sourceBuffer.updating}`, 'debug');\n                this.log(`SourceBuffer 模式: ${this.sourceBuffer.mode}`, 'debug');\n                \n                // 安全地检查缓冲区\n                try {\n                    if (this.sourceBuffer.buffered && this.sourceBuffer.buffered.length > 0) {\n                        this.log(`缓冲区段数: ${this.sourceBuffer.buffered.length}`, 'debug');\n                        for (let i = 0; i < this.sourceBuffer.buffered.length; i++) {\n                            const start = this.sourceBuffer.buffered.start(i);\n                            const end = this.sourceBuffer.buffered.end(i);\n                            this.log(`缓冲区 ${i}: ${start.toFixed(2)} - ${end.toFixed(2)}`, 'debug');\n                        }\n                    } else {\n                        this.log('SourceBuffer 缓冲区为空', 'debug');\n                    }\n                } catch (bufferError) {\n                    this.log(`访问缓冲区失败: ${bufferError.message}`, 'warning');\n                }\n                \n                // 检查时间戳偏移\n                this.log(`时间戳偏移: ${this.sourceBuffer.timestampOffset}`, 'debug');\n                this.log(`追加窗口: ${this.sourceBuffer.appendWindowStart} - ${this.sourceBuffer.appendWindowEnd}`, 'debug');\n            } else {\n                this.log('SourceBuffer 对象不存在', 'error');\n            }\n            \n            // 检查队列状态\n            this.log(`流队列长度: ${this.streamQueue.length}`, 'debug');\n            this.log(`是否正在流式播放: ${this.isStreaming}`, 'debug');\n            \n            // 检查视频元素状态\n            const video = document.querySelector('#convertedVideoContainer video');\n            if (video) {\n                this.log(`视频当前时间: ${video.currentTime}`, 'debug');\n                this.log(`视频就绪状态: ${video.readyState}`, 'debug');\n                this.log(`视频网络状态: ${video.networkState}`, 'debug');\n                if (video.error) {\n                    this.log(`视频错误: ${video.error.message}`, 'error');\n                }\n            }\n            \n            this.log('=== 诊断结束 ===', 'debug');\n            \n            // 根据诊断结果采取恢复措施\n            this.handleSourceBufferErrorRecovery();\n            \n        } catch (diagnosisError) {\n            this.log(`诊断过程中出错: ${diagnosisError.message}`, 'error');\n        }\n    }\n\n    // 处理 SourceBuffer 错误恢复\n    handleSourceBufferErrorRecovery() {\n        this.log('尝试 SourceBuffer 错误恢复...', 'warning');\n        \n        // 策略1: 如果 SourceBuffer 仍然可用，尝试重置\n        if (this.sourceBuffer && this.mediaSource && this.mediaSource.readyState === 'open') {\n            try {\n                // 清空队列防止继续添加数据\n                this.streamQueue = [];\n                \n                // 如果 SourceBuffer 正在更新，等待完成\n                if (this.sourceBuffer.updating) {\n                    this.log('SourceBuffer 正在更新，等待完成...', 'warning');\n                    setTimeout(() => this.handleSourceBufferErrorRecovery(), 1000);\n                    return;\n                }\n                \n                // 尝试安全地结束流\n                this.safeEndStream();\n                \n                this.log('SourceBuffer 错误恢复处理完成', 'info');\n                return;\n                \n            } catch (recoveryError) {\n                this.log(`恢复策略1失败: ${recoveryError.message}`, 'error');\n            }\n        }\n        \n        // 策略2: 完全重置流式播放\n        this.log('执行完全重置策略...', 'warning');\n        this.stopStreaming();\n        \n        // 可选：重新初始化 MediaSource\n        setTimeout(() => {\n            if (this.isStreaming) {\n                this.log('尝试重新初始化 MediaSource...', 'info');\n                this.initMediaSource().catch(error => {\n                    this.log(`重新初始化失败: ${error.message}`, 'error');\n                });\n            }\n        }, 2000);\n    }\n\n    // 安全地结束MediaSource流\n    safeEndStream() {\n        if (this.mediaSource && this.mediaSource.readyState === 'open') {\n            try {\n                // 检查 SourceBuffer 是否仍然可用\n                if (this.sourceBuffer && !this.sourceBuffer.updating) {\n                    // 先移除 SourceBuffer\n                    if (this.mediaSource.sourceBuffers.length > 0) {\n                        this.mediaSource.removeSourceBuffer(this.sourceBuffer);\n                        this.log('已移除 SourceBuffer', 'debug');\n                    }\n                    \n                    // 然后结束流\n                    this.mediaSource.endOfStream();\n                    this.log('MediaSource 流已安全结束', 'debug');\n                } else {\n                    this.log('SourceBuffer 正在更新或不可用，跳过结束流', 'warning');\n                }\n            } catch (error) {\n                this.log(`结束MediaSource流失败: ${error.message}`, 'warning');\n                console.error('结束流失败详情:', error);\n            }\n        }\n    }\n\n    async getVideoDuration(inputFile) {\n        // 由于 inputFile 已经在 FFmpeg 文件系统中，直接使用\n        const command = [\n            '-i', inputFile,\n            '-f', 'null',\n            '-'\n        ];\n        \n        try {\n            // 执行命令获取时长\n            await this.ffmpeg.exec(command);\n            \n            // 简化处理，返回默认值\n            // 在实际应用中，应该从FFmpeg的输出中解析时长信息\n            this.log('使用默认视频时长: 60秒');\n            return 60; // 默认60秒\n        } catch (error) {\n            this.log(`获取视频时长失败: ${error.message}`, 'warning');\n            this.log('使用默认视频时长: 60秒');\n            return 60; // 默认值\n        }\n    }\n}\n\n// 页面加载完成后初始化\ndocument.addEventListener('DOMContentLoaded', () => {\n    new FFmpegDemo();\n});\n\n// 添加全局错误处理\nwindow.addEventListener('error', (event) => {\n    console.error('全局错误:', event.error);\n    \n    // 特殊处理 SourceBuffer 相关错误\n    if (event.error && event.error.name === 'InvalidStateError') {\n        console.warn('检测到 SourceBuffer 状态错误，可能是正常的状态清理过程');\n        // 不显示给用户，因为这通常是正常的资源清理过程\n    }\n});\n\nwindow.addEventListener('unhandledrejection', (event) => {\n    console.error('未处理的 Promise 拒绝:', event.reason);\n});"],"names":["readFromBlobOrFile","blob","resolve","reject","fileReader","result","event","_b","_a","fetchFile","file","data","c","FFmpegDemo","FFmpeg","progress","error","testFilename","testData","urlParams","savedDebugMode","uploadSection","fileInput","convertBtn","stopStreamingBtn","crfSlider","crfValue","e","files","status","container","video","progressSection","streamingMode","outputFormat","videoCodec","crf","preset","threads","performanceMode","hardwareAcceleration","outputFileName","fileError","deleteError","filename","downloadLink","volumeControl","progressFill","progressText","percentage","time","remaining","remainingFormatted","metrics","performanceInfo","timeSeconds","sizeChange","speed","memoryMB","message","type","logSection","logContent","timestamp","logEntry","color","bytes","k","sizes","i","seconds","hrs","mins","secs","options","input","output","command","hwAccel","performanceParams","hwType","params","mode","execError","convertedBlob","readError","segmentDuration","segments","startTime","segmentName","segmentData","combinedData","streamingAttempt","maxStreamingAttempts","chunkDuration","currentChunk","totalDuration","consecutiveErrors","maxConsecutiveErrors","chunkExtension","chunkName","chunkData","chunkError","mimeTypes","supportedMimeType","mimeType","errorMessage","statusDiv","checkInterval","hasData","maxRetries","attempt","timeout","checkQueue","bufferStatus","chunk","errorHandler","bufferedLength","totalBufferedDuration","appendError","bufferedEnd","currentTime","bufferAhead","usedHeapSize","totalHeapSize","memoryUsage","stats","originalSupportedMimeType","removeEnd","sbError","msError","cleanupError","errorEvent","start","end","bufferError","diagnosisError","recoveryError","inputFile"],"mappings":"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","x_google_ignoreList":[0]}